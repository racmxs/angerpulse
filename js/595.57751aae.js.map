{"version":3,"file":"js/595.57751aae.js","mappings":"ssFAygBA,MAAMA,EAAS,CACb,IAAIC,IAAI,aAAoEC,KAC5E,IAAID,IAAI,aAAoEC,KAC5E,IAAID,IAAI,aAAoEC,KAC5E,IAAID,IAAI,aAAoEC,KAC5E,IAAID,IAAI,aAAoEC,KAC5E,IAAID,IAAI,aAAqEC,KAC7E,IAAID,IAAI,aAAqEC,MAGzEC,EAAa,CACjB,OACA,OACA,OACA,OACA,OACA,OACA,QAGIC,GAASC,EAAAA,EAAAA,KAAI,GACbC,EAAW,IAAIL,IAAI,aAAsCC,KACzDK,EAAY,IAAIN,IAAI,aAAuCC,KAE3DM,GAAeH,EAAAA,EAAAA,IAAI,GACnBI,GAAYJ,EAAAA,EAAAA,KAAI,GAChBK,GAAYL,EAAAA,EAAAA,KAAI,GAChBM,GAAcN,EAAAA,EAAAA,IAAI,GAClBO,GAAWP,EAAAA,EAAAA,IAAI,GACfQ,EAAQ,IAAIC,MAEZC,GAAYV,EAAAA,EAAAA,IAAI,MACtB,IAAIW,EAAcC,EAAUC,EAAWC,EAAQC,EAC3CC,EAAkB,GAEtB,SAASC,IACPlB,EAAOmB,OAAQ,CACjB,CAEA,SAASC,IACPR,EAAe,IAAKS,OAAOC,cAAgBD,OAAOE,oBAClDV,EAAWD,EAAaY,iBACxBX,EAASY,QAAU,GACnB,MAAMC,EAAeb,EAASc,kBAS9B,GARAb,EAAY,IAAIc,WAAWF,GAE3BX,EAASH,EAAaiB,yBAAyBpB,GAC/CM,EAAOe,QAAQjB,GACfA,EAASiB,QAAQlB,EAAamB,aAE9BC,IAE2B,cAAvBpB,EAAaqB,MAAuB,CACtC,MAAMC,EAASA,KACbtB,EAAasB,SACbC,SAASC,oBAAoB,aAAcF,EAAO,EAEpDC,SAASE,iBAAiB,aAAcH,EAAQ,CAAEI,MAAM,GAC1D,CACF,CAEA,SAASN,IACP,MAAMO,EAAS5B,EAAUQ,MACnBqB,EAAMD,EAAOE,WAAW,MACxBC,EAAQH,EAAOG,MACfC,EAASJ,EAAOI,OAChBC,EAAUD,EAAS,EAEzB,SAASE,IACP7B,EAAc8B,sBAAsBD,GACpChC,EAASkC,qBAAqBjC,GAE9B0B,EAAIQ,UAAU,EAAG,EAAGN,EAAOC,GAE3B,MAAMM,EAAWP,EAAQ5B,EAAUoC,OACnC,IAAIC,EAAI,EAER,IAAK,IAAIC,EAAI,EAAGA,EAAItC,EAAUoC,OAAQE,IAAK,CAEzC,MAAMjC,EAAQL,EAAUsC,GAClBC,EAAYlC,EAAQ,EAEpBmC,EAAWd,EAAIe,qBAAqB,EAAGX,EAAUS,EAAW,EAAGT,EAAUS,GAC/EC,EAASE,aAAa,EAAG,QACzBF,EAASE,aAAa,EAAG,QACzBhB,EAAIiB,UAAYH,EAChBd,EAAIkB,SAASP,EAAGP,EAAUS,EAAWJ,EAAUI,GAC/Cb,EAAIkB,SAASP,EAAGP,EAASK,EAAUI,GACnCF,GAAKF,EAAW,CAClB,CACF,CAEAJ,GACF,CAEA,SAASc,EAAaT,GACpB,MAAMU,EAAU,IAAIC,MAAMX,GAAQY,QAClC,IAAK,IAAIV,EAAIQ,EAAQV,OAAS,EAAGE,EAAI,EAAGA,IAAK,CAC3C,MAAMW,EAAIC,KAAKC,MAAMD,KAAKE,UAAYd,EAAI,KACxCQ,EAAQR,GAAIQ,EAAQG,IAAM,CAACH,EAAQG,GAAIH,EAAQR,GACnD,CACA,OAAOQ,CACT,CAEA,SAASO,EAAUC,GACjB3D,EAAM4D,IAAMzE,EAAOwE,GACnB3D,EAAM6D,OACN7D,EAAM8D,OAAOC,MAAK,KAChBnE,EAAUc,OAAQ,CAAI,IACrBsD,OAAMC,IACPC,QAAQC,KAAK,6CAA8CF,EAAI,GAEnE,CAEA,SAASG,IACHpE,EAAMqE,QACRrE,EAAM8D,OACNlE,EAAUc,OAAQ,IAElBV,EAAMsE,QACN1E,EAAUc,OAAQ,EAClBnB,EAAOmB,OAAQ,EAEnB,CAEA,SAAS6D,IACH1E,EAAUa,OACmB,IAA3BF,EAAgBiC,SAClBjC,EAAkB0C,EAAa/D,EAAOsD,SAExC9C,EAAae,MAAQF,EAAgBgE,SAErC7E,EAAae,OAASf,EAAae,MAAQ,GAAKvB,EAAOsD,OAEzDiB,EAAU/D,EAAae,MACzB,CAEA,SAAS+D,IACH5E,EAAUa,OACmB,IAA3BF,EAAgBiC,SAClBjC,EAAkB0C,EAAa/D,EAAOsD,SAExC9C,EAAae,MAAQF,EAAgBgE,SAErC7E,EAAae,OAASf,EAAae,MAAQ,EAAIvB,EAAOsD,QAAUtD,EAAOsD,OAEzEiB,EAAU/D,EAAae,MACzB,CAcA,SAASgE,IACP1E,EAAMF,YAAcA,EAAYY,KAClC,CAWA,SAASiE,EAAWC,GAClB,MAAMC,EAAUtB,KAAKC,MAAMoB,EAAO,IAC5BE,EAAUvB,KAAKC,MAAMoB,EAAO,IAAIG,WAAWC,SAAS,EAAG,KAC7D,MAAO,GAAGH,KAAWC,GACvB,C,OAbA9E,EAAM4B,iBAAiB,cAAc,KACnC9B,EAAYY,MAAQV,EAAMF,YAC1BC,EAASW,MAAQV,EAAMD,UAAY,CAAC,IAGtCC,EAAM4B,iBAAiB,SAAS,KAC9B2C,GAAW,KASbU,EAAAA,EAAAA,KAAU,KACRtE,IACA+C,EAAU/D,EAAae,MAAM,KAG/BwE,EAAAA,EAAAA,KAAgB,KACdC,qBAAqB5E,GACrBP,EAAMsE,QACNtE,EAAM4D,IAAM,GACRzD,GAAcA,EAAaiF,OAAO,I,kxJChsBxC,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://angerpulse/./src/components/AngerPlay.vue","webpack://angerpulse/./src/components/AngerPlay.vue?146d"],"sourcesContent":["<template>\r\n  <div v-show=\"!moment\">\r\n    <label class=\"r-28-gray\" @click=\"updateShow\">Domina tu ira</label>\r\n    <br><br>\r\n    <div class=\"audio-player\">\r\n    <canvas ref=\"canvasRef\" width=\"256\" height=\"200\" class=\"visualizer\"></canvas>\r\n\r\n    <div class=\"song-info\">\r\n      <h3>{{ songTitles[currentIndex] }}</h3>\r\n      <div class=\"time\">\r\n        {{ formatTime(currentTime) }} / {{ formatTime(duration) }}\r\n      </div>\r\n      <input\r\n        type=\"range\"\r\n        min=\"0\"\r\n        :max=\"duration\"\r\n        v-model=\"currentTime\"\r\n        @input=\"seekAudio\"\r\n      />\r\n    </div>\r\n    <div class=\"d-flex py-5\">\r\n      <img src=\"../assets/Atras.png\" class=\"m-auto\" @click=\"prevTrack\">\r\n      <img :src=\"isPlaying ? pauseIcon : playIcon\"\r\n        style=\"height: 100%; width: fit-content; margin: auto;\" @click=\"togglePlay\">\r\n      <img src=\"../assets/Siguiente.png\" class=\"m-auto\" @click=\"nextTrack\">\r\n    </div>\r\n\r\n    <!-- <div class=\"controls\">\r\n      <button @click=\"prevTrack\">⏮️</button>\r\n      <button @click=\"togglePlay\">\r\n        <img :src=\"isPlaying ? pauseIcon : playIcon\" alt=\"Play/Pause\" />\r\n      </button>\r\n      <button @click=\"nextTrack\">⏭️</button>\r\n    </div> -->\r\n  </div>\r\n\r\n    <!-- <div class=\"audio-player\">\r\n\r\n      <audio ref=\"audioRef\" :src=\"currentSong\" @ended=\"nextSong\" @timeupdate=\"updateTime\"\r\n        @loadedmetadata=\"updateDuration\" />\r\n    </div>\r\n    <div class=\"d-flex\">\r\n      <canvas ref=\"canvasRef\" width=\"256\" height=\"200\" class=\"visualizer\"></canvas>\r\n    </div>\r\n    <div class=\"d-flex py-5\">\r\n      <img src=\"../assets/Atras.png\" class=\"m-auto\" @click=\"prevTrack\">\r\n      <img :src=\"isPlaying ? pauseIcon : playIcon\"\r\n        style=\"height: 100%; width: fit-content; margin: auto;\" @click=\"togglePlay\">\r\n      <img src=\"../assets/Siguiente.png\" class=\"m-auto\" @click=\"nextTrack\">\r\n    </div>\r\n    <div class=\"d-flex justify-content-between px-4\">\r\n      <div class=\"my-auto\">\r\n        <label class=\"b-20-gray\">{{ currentSongName }}</label>\r\n      </div>\r\n      <div>\r\n        <img src=\"../assets/heart.png\" class=\"m-auto\">\r\n      </div>\r\n    </div>\r\n    <div class=\"progress-bar px-4 py-4\">\r\n      <input type=\"range\" min=\"0\" :max=\"duration\" step=\"0.1\" v-model=\"currentTime\" @input=\"seekAudio\" />\r\n      <div class=\"time\">\r\n        {{ formatTime(currentTime) }} / {{ formatTime(duration) }}\r\n      </div>\r\n    </div> -->\r\n    <!-- <br>\r\n    <div class=\"interseccion-large my-4\"></div> -->\r\n    <!-- <p class=\"m-10-gray text-start px-3\">\r\n      El fracaso, la tristeza y el arrepentimiento son los compañeros de viaje de la ira…\r\n      <br><br>\r\n      Es más fácil excluirla y no admitirla que gobernarla…\r\n      <br><br>\r\n      Debes sofocar sus primeros impulsos…\r\n      <br><br>\r\n      Al poseerte ya no puedes contenerla…\r\n      <br><br>\r\n      Séneca\r\n      <br>\r\n      Sobre la ira\r\n    </p>\r\n    <div class=\"interseccion-large my-4\"></div> -->\r\n    <p class=\"r-14-gray pb-5\">\r\n      Music by CalmWaves\r\n      <br><br>\r\n      Arr. by Angerpulse\r\n    </p>\r\n    <label class=\"b-40-gray bg-white px-5\">Guía</label>\r\n    <div class=\"square-info pt-5\" style=\"margin-top: -30px;\">\r\n      <p class=\"m-16-gray px-4 py-4\">\r\n        Cuando escuches el primer UDU (sonido de percusión) inhala despacio y profundo por la nariz.\r\n        <br><br>\r\n        Sin interrumpir la inhalación hasta escuchar el siguiente UDU...\r\n        <br><br>\r\n        Ahora con calma exhala suave y lento por la boca...\r\n        <br><br>\r\n        Sin interrumpir la exhalación hasta escuchar el siguiente UDU...\r\n        <br><br>\r\n        Sigue alternando inhalación y exhalación cada vez que escuches UDU.\r\n      </p>\r\n    </div>\r\n  </div>\r\n  <div v-show=\"moment\">\r\n    <div>\r\n      <div>\r\n        <label class=\"sb-20-black pb-4\">¿En qué momento estabas?</label>\r\n        <ul class=\"ps-0\">\r\n          <li class=\"list-group-item text-start r-16-gray py-2\">\r\n            <div class=\"ps-5 form-check\">\r\n              <input id=\"plan-m\" class=\"form-check-input\" type=\"radio\" name=\"plan\" value=\"\" aria-label=\"...\">\r\n              <label for=\"plan-m\" class=\"form-check-label\">1) Antes de actividades previstas, planeadas o\r\n                rutinarias. </label>\r\n            </div>\r\n          </li>\r\n          <li class=\"list-group-item text-start r-16-gray py-2\">\r\n            <div class=\"ps-5 form-check\">\r\n              <input id=\"plan-s\" class=\"form-check-input\" type=\"radio\" name=\"plan\" value=\"\" aria-label=\"...\">\r\n              <label for=\"plan-s\" class=\"form-check-label\">2) Cavilaciones y sobrepensamiento. Encerrado en tu\r\n                mente.</label>\r\n            </div>\r\n          </li>\r\n          <li class=\"list-group-item text-start r-16-gray py-2\">\r\n            <div class=\"ps-5 form-check\">\r\n              <input id=\"plan-a\" class=\"form-check-input\" type=\"radio\" name=\"plan\" value=\"\" aria-label=\"...\">\r\n              <label for=\"plan-a\" class=\"form-check-label\">3) Transiciones entre situaciones, actividades,\r\n                lugares. </label>\r\n            </div>\r\n          </li>\r\n          <li class=\"list-group-item text-start r-16-gray py-2\">\r\n            <div class=\"ps-5 form-check\">\r\n              <input id=\"plan-4\" class=\"form-check-input\" type=\"radio\" name=\"plan\" value=\"\" aria-label=\"...\">\r\n              <label for=\"plan-4\" class=\"form-check-label\">4) Indignación o irritación por palabras o acciones\r\n                de alguien más.</label>\r\n            </div>\r\n          </li>\r\n          <li class=\"list-group-item text-start r-16-gray py-2\">\r\n            <div class=\"ps-5 form-check\">\r\n              <input id=\"plan-5\" class=\"form-check-input\" type=\"radio\" name=\"plan\" value=\"\" aria-label=\"...\">\r\n              <label for=\"plan-5\" class=\"form-check-label\">5) Después de hablar/actuar de manera emocional, impulsiva e incorrecta.</label>\r\n            </div>\r\n          </li>\r\n          \r\n        </ul>\r\n        <div class=\"d-flex justify-content-center pt-3 pb-5\">\r\n          <div class=\"px-3\">\r\n            <button type=\"button\" class=\"btn-gray-white\" @click=\"SetMoment()\">\r\n              Omitir\r\n            </button>\r\n          </div>\r\n          <div class=\"px-3\">\r\n            <button type=\"button\" class=\"btn-black border-0\" @click=\"SetMoment()\">\r\n              Guardar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <label class=\"sb-20-black pb-5\">¿Por qué indicar el momento?</label>\r\n        <p class=\"r-16-gray text-center px-3 pb-5\">\r\n          Distinguir y registrar el “momento” en el que estabas cuando decidiste hacer un audioejercicio(s) te\r\n          ayudará a:\r\n          <br><br>\r\n          - Entender cuándo debes estar más atento para regular tus emociones pre-ira y contener tus principales\r\n          detonantes de ira.\r\n          <br><br>\r\n          - Desarrollar una mayor capacidad de prevención y autocontrol.\r\n          <br><br>\r\n          Si decides no indicar el momento, solo pulsa el botón “omitir” cuando aparezca la pantalla de registro.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<!-- <script setup>\r\nimport { ref, computed, onMounted } from 'vue';\r\n\r\nconst songs = [\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_2.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_6.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_7.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_8.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_9.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_11.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_21.mp3', import.meta.url).href\r\n]\r\nconst moment = ref(false)\r\nconst playIcon = new URL('@/assets/Play.png', import.meta.url).href\r\nconst pauseIcon = new URL('@/assets/Pausa.png', import.meta.url).href\r\nconst audioRef = ref(null)\r\nconst isPlaying = ref(false)\r\nconst shuffleOrder = ref([])\r\nconst shuffleIndex = ref(0)\r\nconst currentIndex = ref(0)\r\nconst currentSong = computed(() => songs[currentIndex.value])\r\nconst currentTime = ref(0)\r\nconst duration = ref(0)\r\nconst currentSongName = computed(() => `AP ${currentIndex.value + 1}`)\r\n\r\nconst canvasRef = ref(null)\r\nconst audioContext = ref(null)\r\nconst analyser = ref(null)\r\nconst dataArray = ref(null)\r\nconst animationId = ref(null)\r\n\r\nfunction setupVisualizer() {\r\n  if (!audioRef.value) return\r\n\r\n  audioContext.value = new (window.AudioContext || window.webkitAudioContext)()\r\n  const source = audioContext.value.createMediaElementSource(audioRef.value)\r\n  analyser.value = audioContext.value.createAnalyser()\r\n\r\n  source.connect(analyser.value)\r\n  analyser.value.connect(audioContext.value.destination)\r\n\r\n  // analyser.value.fftSize = 64\r\n  // const bufferLength = analyser.value.frequencyBinCount\r\n  // dataArray.value = new Uint8Array(bufferLength)\r\n\r\n  analyser.value.fftSize = 2048 // Mayor resolución de onda\r\nconst bufferLength = analyser.value.fftSize\r\ndataArray.value = new Uint8Array(bufferLength)\r\n\r\n  drawVisualizer()\r\n}\r\n\r\nfunction drawVisualizer() {\r\n  const canvas = canvasRef.value\r\n  const ctx = canvas.getContext('2d')\r\n  const width = canvas.width\r\n  const height = canvas.height\r\n  const centerY = height / 2\r\n\r\n  function draw() {\r\n    animationId.value = requestAnimationFrame(draw)\r\n    analyser.value.getByteFrequencyData(dataArray.value)\r\n\r\n    ctx.clearRect(0, 0, width, height)\r\n\r\n    const barWidth = width / dataArray.value.length\r\n    let x = 0\r\n\r\n    for (let i = 0; i < dataArray.value.length; i++) {\r\n      const value = dataArray.value[i]\r\n      const barHeight = value / 2\r\n\r\n      // Color de barra (puedes usar gradientes si quieres)\r\n     // ctx.fillStyle = '#aaa' // gris claro como en la imagen\r\n      const gradient = ctx.createLinearGradient(0, centerY - barHeight, 0, centerY + barHeight)\r\n      gradient.addColorStop(0, '#00f')\r\n      gradient.addColorStop(1, '#0ff')\r\n      ctx.fillStyle = gradient\r\n\r\n      // Dibuja de centro hacia arriba\r\n      ctx.fillRect(x, centerY - barHeight, barWidth, barHeight)\r\n\r\n      // Dibuja de centro hacia abajo (espejo)\r\n      ctx.fillRect(x, centerY, barWidth, barHeight)\r\n\r\n      x += barWidth + 1 // separa un poco las barras\r\n    }\r\n  }\r\n\r\n  draw()\r\n}\r\n\r\n// function drawVisualizer() {\r\n//   const canvas = canvasRef.value\r\n//   const ctx = canvas.getContext('2d')\r\n//   const width = canvas.width\r\n//   const height = canvas.height\r\n\r\n//   function draw() {\r\n//     animationId.value = requestAnimationFrame(draw)\r\n//     analyser.value.getByteTimeDomainData(dataArray.value)\r\n\r\n//     ctx.clearRect(0, 0, width, height)\r\n\r\n//     ctx.lineWidth = 2\r\n//     ctx.strokeStyle = '#00bcd4' // color de la onda\r\n\r\n//     ctx.beginPath()\r\n\r\n//     const sliceWidth = width / dataArray.value.length\r\n//     let x = 0\r\n\r\n//     for (let i = 0; i < dataArray.value.length; i++) {\r\n//       const v = dataArray.value[i] / 128.0 // rango normalizado (0.0 a 2.0)\r\n//       const y = (v * height) / 2\r\n\r\n//       if (i === 0) {\r\n//         ctx.moveTo(x, y)\r\n//       } else {\r\n//         ctx.lineTo(x, y)\r\n//       }\r\n\r\n//       x += sliceWidth\r\n//     }\r\n\r\n//     ctx.lineTo(width, height / 2)\r\n//     ctx.stroke()\r\n//   }\r\n\r\n//   draw()\r\n// }\r\n\r\n// function drawVisualizer() {\r\n//   const canvas = canvasRef.value\r\n//   const ctx = canvas.getContext('2d')\r\n//   const width = canvas.width\r\n//   const height = canvas.height\r\n//   const centerX = width / 2\r\n//   const centerY = height / 2\r\n//   const radius = 30 // radio base desde donde empiezan las barras\r\n\r\n//   function draw() {\r\n//     animationId.value = requestAnimationFrame(draw)\r\n//     analyser.value.getByteFrequencyData(dataArray.value)\r\n\r\n//     ctx.clearRect(0, 0, width, height)\r\n\r\n//     const bars = dataArray.value.length\r\n//     const angleStep = (Math.PI * 2) / bars\r\n\r\n//     for (let i = 0; i < bars; i++) {\r\n//       const value = dataArray.value[i]\r\n//       const barLength = value * 0.7\r\n\r\n//       const angle = i * angleStep\r\n\r\n//       const xStart = centerX + Math.cos(angle) * radius\r\n//       const yStart = centerY + Math.sin(angle) * radius\r\n//       const xEnd = centerX + Math.cos(angle) * (radius + barLength)\r\n//       const yEnd = centerY + Math.sin(angle) * (radius + barLength)\r\n\r\n//       // Fondo gris claro: barra base\r\n//       ctx.beginPath()\r\n//       ctx.strokeStyle = '#ccc'\r\n//       ctx.lineWidth = 3\r\n//       ctx.moveTo(centerX + Math.cos(angle) * radius, centerY + Math.sin(angle) * radius)\r\n//       ctx.lineTo(centerX + Math.cos(angle) * (radius + 50), centerY + Math.sin(angle) * (radius + 50))\r\n//       ctx.stroke()\r\n\r\n//       // Barra activa: según volumen\r\n//       ctx.beginPath()\r\n//       const r = value + 100\r\n//       const g = 50 + (value * 1.5)\r\n//       const b = 200\r\n//       ctx.strokeStyle = `rgb(${r},${g},${b})`\r\n//       ctx.lineWidth = 3\r\n//       ctx.moveTo(xStart, yStart)\r\n//       ctx.lineTo(xEnd, yEnd)\r\n//       ctx.stroke()\r\n//     }\r\n//   }\r\n\r\n//   draw()\r\n// }\r\n// function drawVisualizer() {\r\n//   const canvas = canvasRef.value\r\n//   const ctx = canvas.getContext('2d')\r\n//   const width = canvas.width\r\n//   const height = canvas.height\r\n\r\n//   function draw() {\r\n//     animationId.value = requestAnimationFrame(draw)\r\n//     analyser.value.getByteFrequencyData(dataArray.value)\r\n\r\n//     ctx.clearRect(0, 0, width, height)\r\n\r\n//     const barWidth = width / dataArray.value.length\r\n//     let x = 0\r\n\r\n//     for (let i = 0; i < dataArray.value.length; i++) {\r\n//       const barHeight = dataArray.value[i] / 2\r\n\r\n//       // Fondo base: barra gris clara\r\n//       ctx.fillStyle = '#eee'\r\n//       ctx.fillRect(x, 0, barWidth - 2, height)\r\n\r\n//       // Barra activa: se ilumina desde abajo hacia arriba\r\n//       const r = barHeight + 100\r\n//       const g = 50 + (barHeight * 2)\r\n//       const b = 150\r\n\r\n//       ctx.fillStyle = `rgb(${r},${g},${b})`\r\n//       ctx.fillRect(x, height - barHeight, barWidth - 2, barHeight)\r\n\r\n//       x += barWidth\r\n//     }\r\n//   }\r\n\r\n//   draw()\r\n// }\r\nfunction SetMoment(){\r\n  moment.value = false\r\n}\r\n/*Generación alatoria*/\r\nfunction generateShuffleOrder() {\r\n  const indices = songs.map((_, i) => i)\r\n  // Fisher-Yates Shuffle\r\n  for (let i = indices.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n      ;[indices[i], indices[j]] = [indices[j], indices[i]]\r\n  }\r\n\r\n  shuffleOrder.value = indices\r\n  shuffleIndex.value = 0\r\n}\r\n/*Restaura la reproducción*/\r\nfunction restartPlayback() {\r\n  if (audioRef.value) {\r\n    audioRef.value.load()\r\n\r\n    const tryPlay = () => {\r\n      audioRef.value.play().then(() => {\r\n        isPlaying.value = true\r\n        if (!audioContext.value) setupVisualizer()\r\n      }).catch((err) => {\r\n        console.error('No se pudo reproducir el audio:', err)\r\n      })\r\n\r\n      // Evitar que se dispare múltiples veces\r\n      audioRef.value.removeEventListener('canplay', tryPlay)\r\n    }\r\n\r\n    audioRef.value.addEventListener('canplay', tryPlay)\r\n  }\r\n}\r\n/*Play*/\r\nfunction play() {\r\n  // isVisibleHome.value = false;\r\n  audioRef.value.play().then(() => {\r\n    isPlaying.value = true\r\n  }).catch(err => {\r\n    console.error('Error al reproducir:', err)\r\n  })\r\n}\r\n/*Pausa*/\r\nfunction pause() {\r\n  audioRef.value.pause()\r\n  isPlaying.value = false\r\n  moment.value = true\r\n}\r\n/*Play y pausa*/\r\nfunction togglePlay() {\r\n  isPlaying.value ? pause() : play()\r\n}\r\n/*Canción siguiente*/\r\nfunction nextSong() {\r\n  shuffleIndex.value++\r\n\r\n  if (shuffleIndex.value >= shuffleOrder.value.length) {\r\n    generateShuffleOrder()\r\n  }\r\n\r\n  currentIndex.value = shuffleOrder.value[shuffleIndex.value]\r\n  restartPlayback()\r\n}\r\n/*Canción previa*/\r\nfunction prevSong() {\r\n  if (shuffleIndex.value > 0) {\r\n    shuffleIndex.value--\r\n  } else {\r\n    shuffleIndex.value = 0\r\n  }\r\n  currentIndex.value = shuffleOrder.value[shuffleIndex.value]\r\n  restartPlayback()\r\n}\r\n\r\nfunction updateTime() {\r\n  if (audioRef.value) {\r\n    currentTime.value = audioRef.value.currentTime\r\n  }\r\n}\r\n\r\nfunction updateDuration() {\r\n  if (audioRef.value) {\r\n    duration.value = audioRef.value.duration\r\n  }\r\n}\r\nfunction seekAudio() {\r\n  if (audioRef.value) {\r\n    audioRef.value.currentTime = currentTime.value\r\n  }\r\n}\r\n\r\nfunction formatTime(time) {\r\n  const minutes = Math.floor(time / 60)\r\n  const seconds = Math.floor(time % 60).toString().padStart(2, '0')\r\n  return `${minutes}:${seconds}`\r\n}\r\n\r\n\r\nimport { onBeforeUnmount } from 'vue'\r\n\r\nonBeforeUnmount(() => {\r\n  if (audioRef.value) {\r\n    audioRef.value.pause()\r\n    audioRef.value.src = ''\r\n    audioRef.value.load()\r\n\r\n    audioRef.value.removeEventListener('timeupdate', updateTime)\r\n    audioRef.value.removeEventListener('loadedmetadata', updateDuration)\r\n  }\r\n\r\n  if (audioContext.value) {\r\n    audioContext.value.close()\r\n    audioContext.value = null\r\n  }\r\n  cancelAnimationFrame(animationId.value)\r\n})\r\n\r\nonMounted(() => {\r\n  generateShuffleOrder()\r\n  restartPlayback()\r\n})\r\n\r\n</script> -->\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue'\r\n\r\nconst audios = [\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_2.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_6.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_7.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_8.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_9.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_11.mp3', import.meta.url).href,\r\n  new URL('@/assets/audios/Angerpulse_Audioejercicio_21.mp3', import.meta.url).href\r\n]\r\n\r\nconst songTitles = [\r\n  'AP 1',\r\n  'AP 2',\r\n  'Ap 3',\r\n  'AP 4',\r\n  'AP 5',\r\n  'Ap 6',\r\n  'Ap 7'\r\n]\r\n\r\nconst moment = ref(false)\r\nconst playIcon = new URL('@/assets/Play.png', import.meta.url).href\r\nconst pauseIcon = new URL('@/assets/Pausa.png', import.meta.url).href\r\n\r\nconst currentIndex = ref(0)\r\nconst isPlaying = ref(false)\r\nconst isShuffle = ref(true)\r\nconst currentTime = ref(0)\r\nconst duration = ref(0)\r\nconst audio = new Audio()\r\n\r\nconst canvasRef = ref(null)\r\nlet audioContext, analyser, dataArray, source, animationId\r\nlet shuffledIndices = []\r\n\r\nfunction SetMoment(){\r\n  moment.value = false\r\n}\r\n\r\nfunction setupVisualizer() {\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)()\r\n  analyser = audioContext.createAnalyser()\r\n  analyser.fftSize = 64\r\n  const bufferLength = analyser.frequencyBinCount\r\n  dataArray = new Uint8Array(bufferLength)\r\n\r\n  source = audioContext.createMediaElementSource(audio)\r\n  source.connect(analyser)\r\n  analyser.connect(audioContext.destination)\r\n\r\n  drawVisualizer()\r\n\r\n  if (audioContext.state === 'suspended') {\r\n    const resume = () => {\r\n      audioContext.resume()\r\n      document.removeEventListener('touchstart', resume)\r\n    }\r\n    document.addEventListener('touchstart', resume, { once: true })\r\n  }\r\n}\r\n\r\nfunction drawVisualizer() {\r\n  const canvas = canvasRef.value\r\n  const ctx = canvas.getContext('2d')\r\n  const width = canvas.width\r\n  const height = canvas.height\r\n  const centerY = height / 2\r\n\r\n  function draw() {\r\n    animationId = requestAnimationFrame(draw)\r\n    analyser.getByteFrequencyData(dataArray)\r\n\r\n    ctx.clearRect(0, 0, width, height)\r\n\r\n    const barWidth = width / dataArray.length\r\n    let x = 0\r\n\r\n    for (let i = 0; i < dataArray.length; i++) {\r\n      \r\n      const value = dataArray[i]\r\n      const barHeight = value / 2\r\n      // ctx.fillStyle = '#aaa'\r\n      const gradient = ctx.createLinearGradient(0, centerY - barHeight, 0, centerY + barHeight)\r\n      gradient.addColorStop(0, '#00f')\r\n      gradient.addColorStop(1, '#0ff')\r\n      ctx.fillStyle = gradient\r\n      ctx.fillRect(x, centerY - barHeight, barWidth, barHeight)\r\n      ctx.fillRect(x, centerY, barWidth, barHeight)\r\n      x += barWidth + 1\r\n    }\r\n  }\r\n\r\n  draw()\r\n}\r\n\r\nfunction shuffleArray(length) {\r\n  const indices = [...Array(length).keys()]\r\n  for (let i = indices.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[indices[i], indices[j]] = [indices[j], indices[i]]\r\n  }\r\n  return indices\r\n}\r\n\r\nfunction loadTrack(index) {\r\n  audio.src = audios[index]\r\n  audio.load()\r\n  audio.play().then(() => {\r\n    isPlaying.value = true\r\n  }).catch(err => {\r\n    console.warn('iOS puede haber bloqueado la reproducción:', err)\r\n  })\r\n}\r\n\r\nfunction togglePlay() {\r\n  if (audio.paused) {\r\n    audio.play()\r\n    isPlaying.value = true\r\n  } else {\r\n    audio.pause()\r\n    isPlaying.value = false\r\n    moment.value = true\r\n  }\r\n}\r\n\r\nfunction nextTrack() {\r\n  if (isShuffle.value) {\r\n    if (shuffledIndices.length === 0) {\r\n      shuffledIndices = shuffleArray(audios.length)\r\n    }\r\n    currentIndex.value = shuffledIndices.shift()\r\n  } else {\r\n    currentIndex.value = (currentIndex.value + 1) % audios.length\r\n  }\r\n  loadTrack(currentIndex.value)\r\n}\r\n\r\nfunction prevTrack() {\r\n  if (isShuffle.value) {\r\n    if (shuffledIndices.length === 0) {\r\n      shuffledIndices = shuffleArray(audios.length)\r\n    }\r\n    currentIndex.value = shuffledIndices.shift()\r\n  } else {\r\n    currentIndex.value = (currentIndex.value - 1 + audios.length) % audios.length\r\n  }\r\n  loadTrack(currentIndex.value)\r\n}\r\n\r\n// function toggleShuffle() {\r\n//   isShuffle.value = !isShuffle.value\r\n//   if (isShuffle.value) {\r\n//     shuffledIndices = shuffleArray(audios.length)\r\n//     if (shuffledIndices.includes(currentIndex.value)) {\r\n//       shuffledIndices = shuffledIndices.filter(i => i !== currentIndex.value)\r\n//     }\r\n//   } else {\r\n//     shuffledIndices = []\r\n//   }\r\n// }\r\n\r\nfunction seekAudio() {\r\n  audio.currentTime = currentTime.value\r\n}\r\n\r\naudio.addEventListener('timeupdate', () => {\r\n  currentTime.value = audio.currentTime\r\n  duration.value = audio.duration || 0\r\n})\r\n\r\naudio.addEventListener('ended', () => {\r\n  nextTrack()\r\n})\r\n\r\nfunction formatTime(time) {\r\n  const minutes = Math.floor(time / 60)\r\n  const seconds = Math.floor(time % 60).toString().padStart(2, '0')\r\n  return `${minutes}:${seconds}`\r\n}\r\n\r\nonMounted(() => {\r\n  setupVisualizer()\r\n  loadTrack(currentIndex.value)\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  cancelAnimationFrame(animationId)\r\n  audio.pause()\r\n  audio.src = ''\r\n  if (audioContext) audioContext.close()\r\n})\r\n</script>\r\n\r\n<!-- <style>\r\n.progress-bar {\r\n  display: flex;\r\n  justify-content: center;\r\n  /* padding: 15px 40px; */\r\n}\r\n\r\n.progress-bar input[type=\"range\"] {\r\n  width: 100%;\r\n  appearance: none;\r\n  height: 8px;\r\n  background: #e3e3e3;\r\n  border-radius: 4px;\r\n  outline: none;\r\n}\r\n\r\n.time {\r\n  font-size: 0.9rem;\r\n  color: #555;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n/* .visualizer {\r\n  display: block;\r\n  margin: 1rem auto;\r\n  background-color: #fff;\r\n  border-radius: 0.5rem;\r\n} */\r\n/* .visualizer {\r\n  display: block;\r\n  margin: 1rem auto;\r\n  background-color: #111;\r\n  border-radius: 50%;\r\n} */\r\n/* .visualizer {\r\n  display: block;\r\n  margin: 1rem auto;\r\n  background-color: #111;\r\n  border-radius: 8px;\r\n} */\r\n.visualizer {\r\n  display: block;\r\n  margin: 1rem auto;\r\n  background-color: white;\r\n}\r\n</style>\r\n -->\r\n\r\n\r\n<style scoped>\r\n.audio-player {\r\n  text-align: center;\r\n  background: #fff;\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  color: #555;\r\n}\r\n\r\n.visualizer {\r\n  display: block;\r\n  margin: 1rem auto;\r\n  background-color: white;\r\n}\r\n\r\n.song-info {\r\n  margin: 1rem 0;\r\n}\r\n.song-info h3 {\r\n  margin: 0;\r\n}\r\n.song-info .time {\r\n  font-size: 0.9rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n.song-info input[type=range] {\r\n  width: 100%;\r\n}\r\n\r\n.controls button {\r\n  background: none;\r\n  border: none;\r\n  margin: 0 1rem;\r\n  cursor: pointer;\r\n  color: white;\r\n}\r\n.controls img {\r\n  width: 40px;\r\n  height: 40px;\r\n}\r\n.controls .active {\r\n  color: lime;\r\n}\r\n</style>\r\n","import script from \"./AngerPlay.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AngerPlay.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AngerPlay.vue?vue&type=style&index=0&id=f860d178&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-f860d178\"]])\n\nexport default __exports__"],"names":["audios","URL","href","songTitles","moment","ref","playIcon","pauseIcon","currentIndex","isPlaying","isShuffle","currentTime","duration","audio","Audio","canvasRef","audioContext","analyser","dataArray","source","animationId","shuffledIndices","SetMoment","value","setupVisualizer","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","bufferLength","frequencyBinCount","Uint8Array","createMediaElementSource","connect","destination","drawVisualizer","state","resume","document","removeEventListener","addEventListener","once","canvas","ctx","getContext","width","height","centerY","draw","requestAnimationFrame","getByteFrequencyData","clearRect","barWidth","length","x","i","barHeight","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","shuffleArray","indices","Array","keys","j","Math","floor","random","loadTrack","index","src","load","play","then","catch","err","console","warn","togglePlay","paused","pause","nextTrack","shift","prevTrack","seekAudio","formatTime","time","minutes","seconds","toString","padStart","onMounted","onBeforeUnmount","cancelAnimationFrame","close","__exports__"],"sourceRoot":""}